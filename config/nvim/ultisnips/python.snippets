########################################################################
# Basic
########################################################################
snippet decorator "make a decorator" b
def $1(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        $2
        return func(*args, **kwargs)
    return wrapper
endsnippet

snippet main "main script" b
#!/usr/bin/env python

def main():
    $1

if __name__ == '__main__':
    main()
endsnippet

snippet utf8 "coding utf-8" b
# -*- coding: utf-8 -*-
$1
endsnippet

snippet init "__init__ method" b
def __init__(self$1):
    $2
endsnippet

snippet def "function definition" b
def $1($2):
    $3
endsnippet

snippet meth "method definition" b
def $1(self$2):
    $3
endsnippet

########################################################################
# Test
########################################################################
snippet ut "unittest"
class $1Test(TestCase):
    def setUp(self):
        pass

    def _callFUT(self, args):
        return func(args)

    def test_ok(self):
        pass
endsnippet

snippet ut.table "table driven test" b
def test_${1:ok}(self):
    Case = namedtuple('Case', 'msg params expected')
    cases = [
        Case(),
    ]
    for c in cases:
        with self.subTest(msg=c.msg):
            actual = self._callFUT(*c.params)
            self.assertEqual(actual, c.expected)
endsnippet

snippet ase "assertEqual"
self.assertEqual($1)
endsnippet

snippet ast "assertTrue"
self.assertTrue($1)
endsnippet

snippet asf "assertFalse"
self.assertFalse($1)
endsnippet

snippet asr "assertRaises"
with self.assertRaises($1):
    $2
endsnippet

snippet asisnone "assertIsNone"
self.assertIsNone($1)
endsnippet

snippet asisnotnone "assertIsNotNone"
self.assertIsNotNone($1)
endsnippet

snippet asin "assertIn"
self.assertIn($1)
endsnippet

snippet asnotin "assertNotIn"
self.assertNotIn($1)
endsnippet

########################################################################
# Debug
########################################################################
snippet bp.pdb "pdb breakpoint"
import pdb; pdb.set_trace()
endsnippet

snippet bp.ipdb "ipdb breakpoint"
import ipdb; ipdb.set_trace()
endsnippet

########################################################################
# 標準ライブラリ
########################################################################
snippet enum.def "enum definition" b
class $1(enum.Enum):
    $2 = enum.auto()
endsnippet

snippet nt "classic style namedtuple" b
$1 = namedtuple("$1", "$2")
endsnippet

snippet json.encode "json encode"
json.dumps($1)
endsnippet

snippet json.decode "json decode"
try:
    ${1:result} = json.loads($2)
except ValueError as e:
    $3
endsnippet

snippet iter.groupby "for groupby" b
for key, group in groupby($1, key=$2):
    $3
endsnippet

snippet iter.take "take function" b
def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))
endsnippet

snippet iter.tail "tail function" b
def tail(n, iterable):
    "Return an iterator over the last n items"
    # tail(3, 'ABCDEFG') --> E F G
    return iter(collections.deque(iterable, maxlen=n))
endsnippet

########################################################################
# Django
########################################################################
snippet django.form "django form" b
class $1Form(forms.Form):
    django#form#$2

    def clean(self):
        cleaned_data = super().clean()
        return cleaned_data
endsnippet

snippet django.form.clean "django form clean method" b
def clean_$1(self):
    $1 = self.cleaned_data.get("$1")
    if False:
        raise forms.ValidationError("fill error message")
    return $1
endsnippet

snippet django.form.CF "django form CharField" b
$1 = forms.CharField(required=False, min_length=0, max_length=20)
endsnippet

snippet django.form.IF "django form IntegerField" b
$1 = forms.IntegerField(required=False, min_value=0, max_value=10)
endsnippet

snippet django.form.BF "django form BooleanField" b
$1 = forms.BooleanField(required=False)
endsnippet

snippet django.middleware "django middleware" b
# TODO: register this class to the MIDDLEWARE section of settings.py.
class $1Middleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        return response

    def process_view(self, request, view_func, view_args, view_kwargs):
        pass
endsnippet

snippet django.qs "django custom queryset" b
class $1QuerySet(models.QuerySet):
    def $2(self):
        return self.filter($3)
# TODO: set \`objects = $1QuerySet.as_manager()\` in the model class
endsnippet

########################################################################
# Misc
########################################################################
snippet db.fetch "fetch rows"
from contextlib import closing
from django.db import connection

sql = 'select * from table'

with closing(connection.cursor()) as cursor:
    cursor.execute(sql, [${1:param}])
    return dict_fetchall(cursor)
endsnippet
