snippet ut "unittest"
class Test$1(unittest.TestCase):
    def setUp(self):
        pass

    def _callFUT(self, args):
        return func(args)

    def test_ok(self):
        pass
endsnippet

snippet ase "assertEqual"
self.assertEqual($1)
endsnippet

snippet ast "assertTrue"
self.assertTrue($1)
endsnippet

snippet asf "assertFalse"
self.assertFalse($1)
endsnippet

snippet asr "assertRaises"
with self.assertRaises($1):
    $2
endsnippet

snippet asisnone "assertIsNone"
self.assertIsNone($1)
endsnippet

snippet asisnotnone "assertIsNotNone"
self.assertIsNotNone($1)
endsnippet

snippet asin "assertIn"
self.assertIn($1)
endsnippet

snippet asnotin "assertNotIn"
self.assertNotIn($1)
endsnippet

snippet db.fetch "fetch rows"
from contextlib import closing
from django.db import connection

sql = 'select * from table'

with closing(connection.cursor()) as cursor:
    cursor.execute(sql, [${1:param}])
    return dict_fetchall(cursor)
endsnippet

snippet pdb.trace "pdb breakpoint"
import pdb; pdb.set_trace()
endsnippet

snippet json.encode "json encode"
json.dumps($1)
endsnippet

snippet json.decode "json decode"
json.loads($1)
endsnippet

snippet iter.groupby "for groupby"
for key, group in groupby($1, key=$2):
    $3
endsnippet

snippet iter.take "take function" b
def take(n, iterable):
    "Return first n items of the iterable as a list"
    return list(islice(iterable, n))
endsnippet

snippet iter.tail "tail function" b
def tail(n, iterable):
    "Return an iterator over the last n items"
    # tail(3, 'ABCDEFG') --> E F G
    return iter(collections.deque(iterable, maxlen=n))
endsnippet

snippet main "main script" b
#!/usr/bin/env python

def main():
    $1

if __name__ == '__main__':
    main()
endsnippet
