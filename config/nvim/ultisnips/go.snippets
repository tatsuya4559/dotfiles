snippet pack "package" b
package `!v expand('%:p:h:t')`
endsnippet

snippet fn "function"
func $1 {
	$2
}
endsnippet

snippet for "for loop" b
for $1 {
	$2
}
endsnippet

snippet ife "if error"
if err != nil {
	${1:panic(err)}
}
endsnippet

snippet "([\w\.]+).append" "append" r
`!p snip.rv = match.group(1)` = append(`!p snip.rv = match.group(1)`, $1)
endsnippet

snippet json.encode "JSON encode"
if err := json.NewEncoder($1).Encode($2); err != nil {
	$3
}
endsnippet

snippet ut.table "table driven test skelton"
func Test$1(t *testing.T) {
	tests := []struct {
		${2:input string
		expected string}
	}{
		{input: "hoge", expected: "fuga"},
	}

	for _, tt := range tests {
		if Testee(tt.input) != tt.expected {
			t.Errorf("error!")
		}
	}
}
endsnippet

snippet httpserver "http server skelton"
package main

import (
	"fmt"
	"log"
	"net/http"
)

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "hoge")
}

func main() {
	http.HandleFunc("/", handler)
	log.Fatal(http.ListenAndServe(":8000", nil))
}
endsnippet

snippet wr "http response writer and http request"
w http.ResponseWriter, r *http.Request
endsnippet

snippet ut "test function"
func Test$1(t *testing.T) {
	$2
}
endsnippet
