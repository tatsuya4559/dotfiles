snippet /** "typedoc"
/**
 * $1
 */
endsnippet

snippet fc "react arrow function component with export."
import React from 'react';

type Props = {
}

const ${1:`!p snip.rv = snip.basename`}: React.FC<Props> = () => {
  return (
    <div></div>
  );
};

export default $1;
endsnippet

snippet imp "import"
import ${2:module} from '${1:path}';
endsnippet

snippet icm "import css modules"
import styles from './`!p snip.rv = snip.basename`.module.css'
endsnippet

snippet exd "export default"
export default ${1:module};
endsnippet

snippet caf "const arrow function"
const ${1:func} = (${2:args}) => {
  $3
};
endsnippet

snippet fn "function"
function $1($2) {
  $3
}
endsnippet

snippet afn "arrow function"
($1) => {
  $2
}
endsnippet

snippet try "try catch"
try {
  $1
} catch(err) {
  $2
}
endsnippet

snippet cn "className"
className=
endsnippet

snippet ust "useState"
const [${1:state}, set`!p snip.rv = t[1][0].upper() + t[1][1:]`] = useState(${2:initialState});
endsnippet

snippet uef "useEffect"
useEffect(() => {
  $1
}, []);
endsnippet

snippet jest "jest"
import React from 'react';
import '@testing-library/jest-dom/extend-expect';
import { render, cleanup } from '@testing-library/react';
import { renderHook, act } from '@testing-library/react-hooks';
import userEvent from '@testing-library/user-event'

afterEach(cleanup);

$1
endsnippet

snippet snap "snapshot test"
test('snapshot', () => {
  const { asFragment } = render($1);
  expect(asFragment()).toMatchSnapshot();
});
endsnippet

snippet it "test case"
test('$1', () => {
  $2
});
endsnippet

snippet desc "describe"
describe('$1', () => {
  $2
});
endsnippet
