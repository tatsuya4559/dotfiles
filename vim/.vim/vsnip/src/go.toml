[[snippet]]
prefix = 'main'
description = 'main function'
body = '''
package main

func main() {
	$1
}
'''

[[snippet]]
prefix = 'append'
description = 'append to slice'
body = '''
$1 = append($1, $2)
'''

[[snippet]]
prefix = 'pack'
description = 'package'
body = '''
package ${TM_DIRECTORY}
'''

[[snippet]]
prefix = 'fn'
description = 'function'
body = '''
func $1 {
}
'''

[[snippet]]
prefix = 'ife'
description = 'if error'
body = '''
if err != nil {
	${1:return nil, err}
}
'''

[[snippet]]
prefix = 'utt'
description = 'table driven test skelton'
body = '''
func Test$1(t *testing.T) {
	tests := []struct {
		input string
		want string
	}{
		{"hoge", "fuga"},
	}

	for _, tt := range tests {
		t.Run(fmt.Sprintf("%s", tt.input), func(t *testing.T) {
			got := Testee(tt.input)
			if got != tt.want {
				t.Errorf("want %v, but got %v", tt.want, got)
			}
		})
	}
}
'''

[[snippet]]
prefix = 'ut'
description = 'unit test'
body = '''
func Test$1(t *testing.T) {
	$2
}
'''

[[snippet]]
prefix = 'terr'
description = 't.Errorf'
body = '''
t.Errorf("want %v, but got %v", $1, $2)
'''

[[snippet]]
prefix = 'tfatal'
description = 't.Fatalf'
body = '''
t.Fatalf("want %v, but got %v", $1, $2)
'''

[[snippet]]
prefix = 'file.open'
description = 'open file'
body = '''
${1:file}, err := os.Open(${2:path})
if err != nil {
	${3:panic(err)}
}
defer $1.Close()
'''

[[snippet]]
prefix = 'file.create'
description = 'create file'
body = '''
f, err := os.Create($1)
if err != nil {
	${2:panic(err)}
}
defer f.Close()
'''

[[snippet]]
prefix = 'fori'
description = 'for loop'
body = '''
for i:=${1:0}; i<${2:n}; ${3:i++} {
	$4
}
'''

[[snippet]]
prefix = 'fors'
description = 'for select'
body = '''
for {
	select {
	case $1:
	}
}
'''

[[snippet]]
prefix = 'hf'
description = 'http handler func'
body = '''
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	$2
}
'''

[[snippet]]
prefix = 'filter'
description = 'tipical filter'
body = '''
var $1 []$2
for _, e := range $3 {
	if $4 {
		$1 = append($1, e)
	}
}
return $1
'''

[[snippet]]
prefix = 'enum'
description = 'enum'
body = '''
type $1 int
const (
	$3 $1 = iota
	$4
)
'''

[[snippet]]
prefix = 'st'
description = 'struct'
body = '''
type $1 struct {
	$2
}
'''

[[snippet]]
prefix = 'recover'
description = 'recover'
body = '''
defer func() {
	if r := recover(); r != nil {
		$1
	}
}()
'''

[[snippet]]
prefix = 'wr'
description = 'wraps error'
body = '''
fmt.Errorf("$1: %w", err)
'''

################################################################################
# Shell like
################################################################################

[[snippet]]
prefix = 'pwd'
description = 'pwd'
body = '''
cwd, err := os.Getwd()
'''

[[snippet]]
prefix = 'cd'
description = 'cd'
body = '''
err := os.Chdir($1)
'''

[[snippet]]
prefix = 'mkdir'
description = 'mkdir'
body = '''
err := os.Mkdir($1, os.ModePerm)
'''

[[snippet]]
prefix = 'mkdirp'
description = 'mkdir -p'
body = '''
err := os.MkdirAll($1, os.ModePerm)
'''

[[snippet]]
prefix = 'exists'
description = 'check file or dir exists'
body = '''
if _, err := os.Stat($1); os.IsNotExist(err) {
	$2
}
'''

[[snippet]]
prefix = 'rm'
description = 'rm'
body = '''
err := os.Remove($1)
'''

[[snippet]]
prefix = 'rmr'
description = 'rm -r'
body = '''
err := os.RemoveAll($1)
'''

[[snippet]]
prefix = 'mv'
description = 'mv'
body = '''
err := os.Rename($1, $2)
'''

[[snippet]]
prefix = 'export'
description = 'export'
body = '''
err := os.Setenv($1, $2)
'''

[[snippet]]
prefix = 'env'
description = 'env var'
body = '''
$1 := os.Getenv($2)
'''

[[snippet]]
prefix = 'glob'
description = 'glob'
body = '''
files, err := filepath.Glob("$1")
'''

[[snippet]]
prefix = 'run'
description = 'run command'
body = '''
cmd := exec.Command(${1:"ls", "-l"})
err := cmd.Run()
'''


# vim: ts=4 noexpandtab
