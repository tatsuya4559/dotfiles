[[snippet]]
prefix = 'decorator'
description = 'make a decorator'
body = '''
def $1(func):
	@functools.wraps(func)
	def wrapper(*args, **kwargs):
		$2
		return func(*args, **kwargs)
	return wrapper
'''

[[snippet]]
prefix = 'conman'
description = 'context manager'
body = '''
@contextlib.contextmanager
def $1():
	# preprocess
	$2
	try:
		yield
		# postprocess
		$3
	except Exception as e:
		# error handle
		raise e
'''

[[snippet]]
prefix = 'main'
description = 'main script'
body = '''
if __name__ == "__main__":
	main()
'''

[[snippet]]
prefix = 'init'
description = '__init__ method'
body = '''
def __init__(self, $1):
	$2
'''

[[snippet]]
prefix = 'argparse'
description = 'argument parser'
body = '''
import argparse
parser = argparse.ArgumentParser()
parser.add_argument($1)
args = parser.parse_args()
'''

################################################################################
# Testing
################################################################################

[[snippet]]
prefix = 'ut.table'
description = 'table driven test'
body = '''
def test_${1:ok}(self):
	Case = namedtuple('Case', 'msg params expected')
	cases = [
		Case(),
	]
	for c in cases:
		with self.subTest(msg=c.msg):
			actual = self._callFUT(*c.params)
			self.assertEqual(actual, c.expected)
'''

[[snippet]]
prefix = 'ut.p'
description = 'parametrized test'
body = '''
@pytest.mark.parametrize(
	"${2:f1, f2}",
	[
		($3),
	],
)
def test_$1(self, $2):
	$4
'''

################################################################################
# Django
################################################################################

[[snippet]]
prefix = 'django.form'
description = 'django form'
body = '''
class $1Form(forms.Form):
	$2

	def clean(self):
		cleaned_data = super().clean()
		return cleaned_data
'''

[[snippet]]
prefix = 'django.form.clean'
description = 'django form clean method'
body = '''
def clean_$1(self):
	$1 = self.cleaned_data.get("$1")
	if False:
		raise forms.ValidationError("fill error message")
	return $1
'''

[[snippet]]
prefix = 'django.middleware'
description = 'django middleware'
body = '''
# TODO: register this class to the MIDDLEWARE section of settings.py.
class $1Middleware:
	def __init__(self, get_response):
		self.get_response = get_response

	def __call__(self, request):
		response = self.get_response(request)
		return response

	def process_view(self, request, view_func, view_args, view_kwargs):
		pass
'''

[[snippet]]
prefix = 'django.qs'
description = 'django custom queryset'
body = '''
class $1QuerySet(models.QuerySet):
	def $2(self):
		return self.filter($3)
# TODO: set `objects = $1QuerySet.as_manager()` in the model class
'''

################################################################################
# Shell like
################################################################################

[[snippet]]
prefix = 'pwd'
description = 'pwd'
body = '''
os.getcwd()
'''

[[snippet]]
prefix = 'cd'
description = 'cd'
body = '''
os.chdir($1)
'''

[[snippet]]
prefix = 'ls'
description = 'ls'
body = '''
os.listdir($1)
'''

[[snippet]]
prefix = 'mkdir'
description = 'mkdir'
body = '''
os.mkdir($1)
'''

[[snippet]]
prefix = 'mkdirp'
description = 'mkdir -p'
body = '''
os.mkdirs($1)
'''

[[snippet]]
prefix = 'exists'
description = 'file or directory exists'
body = '''
os.path.exists($1)
'''

[[snippet]]
prefix = 'cp'
description = 'cp'
body = '''
shutil.copy($1, $2)
'''

[[snippet]]
prefix = 'cpr'
description = 'cp -r'
body = '''
shutil.copytree($1, $2)
'''

[[snippet]]
prefix = 'touch'
description = 'touch'
body = '''
pathlib.Path($1).touch()
'''

[[snippet]]
prefix = 'mv'
description = 'mv'
body = '''
shutil.move($1, $2)
# os.rename($1, $2)
'''

[[snippet]]
prefix = 'rm'
description = 'rm'
body = '''
os.remove($1)
'''

[[snippet]]
prefix = 'rmdir'
description = 'rmdir'
body = '''
os.rmdir($1)
'''

[[snippet]]
prefix = 'rmr'
description = 'rm -r'
body = '''
shutil.rmtree($1)
'''

[[snippet]]
prefix = 'which'
description = 'which'
body = '''
shutil.which($1)
'''

[[snippet]]
prefix = 'chmod'
description = 'chmod'
body = '''
os.chmod($1, ${2:0o755})
'''

[[snippet]]
prefix = 'uname'
description = 'uname'
body = '''
os.uname()
'''

[[snippet]]
prefix = 'export'
description = 'export environment variable'
body = '''
os.putenv($1, $2)
'''

[[snippet]]
prefix = 'run'
description = 'subprocess run'
body = '''
subprocess.run($1)
'''

[[snippet]]
prefix = 'glob'
description = 'glob'
body = '''
glob.glob($1, recursive=True)
'''

[[snippet]]
prefix = 'dirname'
description = 'dirname'
body = '''
os.path.dirname($1)
'''

[[snippet]]
prefix = 'basename'
description = 'basename'
body = '''
os.path.basename($1)
'''

[[snippet]]
prefix = 'expand'
description = 'expand vars'
body = '''
os.path.expandvars($1)
'''

[[snippet]]
prefix = 'curl'
description = 'curl'
body = '''
from urllib.request import urlopen
with urlopen($1) as response:
	status = response.getcode()
	body = response.read()
'''

# vim: ts=4 noexpandtab
