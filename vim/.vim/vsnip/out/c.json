{"fopen":{"description":"file open","body":["FILE *fp = fopen(${1:filename}, ${2:\"r+\"});","if (fp == NULL) {","\tperror(\"fopen\");","\texit(1);","}","fclose(fp);"],"prefix":"fopen"},"perf_counter":{"description":"stop watch","body":["#define BILLION 1000000000L","","struct timespec start, end;","clock_gettime(CLOCK_MONOTONIC, &start);","","$1","","clock_gettime(CLOCK_MONOTONIC, &end);","int64_t elapsed_ns = (end.tv_sec - start.tv_sec) * BILLION + (end.tv_nsec - start.tv_nsec);"],"prefix":"perf_counter"},"mmap":{"description":"mmap","body":["void *data = mmap(NULL, ${1:len}, PROT_READ, MAP_PRIVATE, ${2:fd}, 0);","if (data == MAP_FAILED) {","\tperror(\"mmap\");","\texit(1);","}","munmap(data, $1);"],"prefix":"mmap"},"i":{"description":"include","body":["#include <$1.h>"],"prefix":"i"},"open":{"description":"syscall open","body":["int fd = open($1, ${2:O_RDWR});","if (fd < 0) {","\tperror(\"open\");","\texit(1);","}","close(fd);"],"prefix":"open"},"va":{"description":"variadic argument","body":["#include <stdarg.h>","va_list ap;","va_start(ap, ${1:arg});","va_arg(ap, <type>);","va_end;"],"prefix":"va"},"sprintf":{"description":"secure sprintf","body":["size_t size = snprintf(NULL, 0, \"$1\", $2) + 1;","char *$3 = malloc(sizeof(char) * size);","snprintf($3, size, \"$1\", $2);"],"prefix":"sprintf"},"main":{"description":"main","body":["int main(int argc, char **argv)","{","\t$1","}"],"prefix":"main"},"i\"":{"description":"include","body":["#include \"$1.h\""],"prefix":"i\""}}
