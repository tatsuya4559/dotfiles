snippet main "main func"
package main

import (
	"fmt"
)

func main() {
	$1
	fmt.Println("hello go")
}
endsnippet
snippet pack "package" b
package `!v expand('%:p:h:t')`
endsnippet

snippet fn "function"
func $1 {
	$2
}
endsnippet

snippet ife "if error"
if err != nil {
	${1:panic(err)}
}
endsnippet

snippet "([\w\.]+).append" "append" r
`!p snip.rv = match.group(1)` = append(`!p snip.rv = match.group(1)`, $1)
endsnippet

snippet ut.table "table driven test skelton"
func Test$1(t *testing.T) {
	tests := []struct {
		${2:input string
		expected string}
	}{
		{input: "hoge", expected: "fuga"},
	}

	for _, tt := range tests {
		actual := Testee(tt.input)
		if actual != tt.expected {
			t.Errorf("error!")
		}
	}
}
endsnippet

snippet ut "test function"
func Test$1(t *testing.T) {
	$2
}
endsnippet

snippet open.file "open file"
${1:file}, err := os.Open(${2:path})
if err != nil {
	${3:panic(err)}
}
defer $1.Close()
endsnippet

snippet fori "for i:=0; i<n; i++ loop"
for ${1:i:=0}; ${2:i<n}; ${3:i++} {
	$4
}
endsnippet

snippet http.handlerfn "handler function"
func ${1:handler}(w http.ResponseWriter, r *http.Request) {
	$2
}
endsnippet
