# Basic
snippet decorator "make a decorator" b
def $1(func):
	@functools.wraps(func)
	def wrapper(*args, **kwargs):
		$2
		return func(*args, **kwargs)
	return wrapper
endsnippet

snippet main "main script" b
#!/usr/bin/env python

def main():
	$1

if __name__ == '__main__':
	main()
endsnippet

snippet utf8 "coding utf-8" b
# -*- coding: utf-8 -*-
$1
endsnippet

snippet init "__init__ method" b
def __init__(self$1):
	$2
endsnippet

# Test
snippet ut "unittest"
class $1Test(TestCase):
	def setUp(self):
		pass

	def _callFUT(self, args):
		return func(args)

	def test_ok(self):
		pass
endsnippet

snippet ut.table "table driven test" b
def test_${1:ok}(self):
	Case = namedtuple('Case', 'msg params expected')
	cases = [
		Case(),
	]
	for c in cases:
		with self.subTest(msg=c.msg):
			actual = self._callFUT(*c.params)
			self.assertEqual(actual, c.expected)
endsnippet

snippet ase "assertEqual"
self.assertEqual($1)
endsnippet

snippet ast "assertTrue"
self.assertTrue($1)
endsnippet

snippet asf "assertFalse"
self.assertFalse($1)
endsnippet

snippet asr "assertRaises"
with self.assertRaises($1):
	$2
endsnippet

# Standard Library
snippet nt "classic style namedtuple" b
$1 = namedtuple("$1", "$2")
endsnippet

# Django
snippet django.form "django form" b
class $1Form(forms.Form):
	$2

	def clean(self):
		cleaned_data = super().clean()
		return cleaned_data
endsnippet

snippet django.form.clean "django form clean method" b
def clean_$1(self):
	$1 = self.cleaned_data.get("$1")
	if False:
		raise forms.ValidationError("fill error message")
	return $1
endsnippet

snippet django.middleware "django middleware" b
# TODO: register this class to the MIDDLEWARE section of settings.py.
class $1Middleware:
	def __init__(self, get_response):
		self.get_response = get_response

	def __call__(self, request):
		response = self.get_response(request)
		return response

	def process_view(self, request, view_func, view_args, view_kwargs):
		pass
endsnippet

snippet django.qs "django custom queryset" b
class $1QuerySet(models.QuerySet):
	def $2(self):
		return self.filter($3)
# TODO: set \`objects = $1QuerySet.as_manager()\` in the model class
endsnippet

# Misc
snippet db.fetch "fetch rows"
from contextlib import closing
from django.db import connection

sql = 'select * from table'

with closing(connection.cursor()) as cursor:
	cursor.execute(sql, [${1:param}])
	return dict_fetchall(cursor)
endsnippet
